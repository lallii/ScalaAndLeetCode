class Solution {
    public int longestOnes(int[] arr, int k) {
      int n=arr.length,l=0,r=0,ans=0,temp=0;
        for(r=0;r<n;r++)
        {
            if(arr[r]%2==0)
               temp++;
            
            while(temp>k)
            {
                if(arr[l]%2==0)
                temp--;
                l++;
            }
            ans=Math.max(ans,r-l+1);
        }
        return ans;
    }
}

Given a binary array nums and an integer k, return the maximum number of consecutive 1's in the array if you can flip at most k 0's.

Example 1:

Input: nums = [1,1,1,0,0,0,1,1,1,1,0], k = 2
Output: 6
Explanation: [1,1,1,0,0,1,1,1,1,1,1]
Bolded numbers were flipped from 0 to 1. The longest subarray is underlined.
Example 2:

Input: nums = [0,0,1,1,0,0,1,1,1,0,1,1,0,0,0,1,1,1,1], k = 3
Output: 10
Explanation: [0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1]
Bolded numbers were flipped from 0 to 1. The longest subarray is underlined.