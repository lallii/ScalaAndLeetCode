/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public static ListNode reverseLinkedList(ListNode head)
    {
        ListNode temp=head,prev=null,front=null;
        while(temp!=null)
        {
             front=temp.next;
             temp.next=prev;
             prev=temp;
             temp=front;
        }
        return prev;
    }
    public static ListNode kthNodeList(ListNode temp,int k)
    {
        k-=1;
        while(temp!=null && k>0)
        {
            k--;
            temp=temp.next;
        }
        return temp;
    }
    public ListNode reverseKGroup(ListNode head, int k) {
        ListNode temp=head,prev=null,nextNode=null;
        while(temp!=null)
        {
            ListNode kthNode=kthNodeList(temp,k);
            if(kthNode==null)
            {
                if(prev!=null)
                prev.next=temp;
                break;
            }
            nextNode=kthNode.next;
            kthNode.next=null;
            reverseLinkedList(temp);
            if(temp==head)
            {
               head=kthNode;
            }
            else
            {
               prev.next=kthNode;
            }
            prev=temp;
            temp=nextNode;
        }
        return head;
    }

}

Input: head = [1,2,3,4,5], k = 2
Output: [2,1,4,3,5]