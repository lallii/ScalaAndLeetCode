class Solution {
    public int longestValidParentheses(String s) {
      if(s==null|| s.length()<2)
         return 0;
       Stack<Integer> stack = new Stack<>();
       for(int i=0;i<s.length();i++)
       {
          char ch=s.charAt(i);
          if(ch=='(')
            stack.push(i);
          else
          {
             if(!stack.isEmpty() && s.charAt(stack.peek())=='(')
               stack.pop();
            else
              stack.push(i);
          }
       }
       System.out.println(stack);
       int maxLen=0,len=s.length();
       if(stack.isEmpty())
       {
         return s.length();
       }
       while(!stack.isEmpty())
       {
           int i=stack.pop();
           System.out.println(i);
           len=len-i-1;
           System.out.println(len);
           maxLen=Math.max(maxLen,len);
           len=i;
       }
       return Math.max(maxLen,len);
    }
}


Given a string containing just the characters '(' and ')', return the length of the longest valid (well-formed) parentheses 
substring
.

 

Example 1:

Input: s = "(()"
Output: 2
Explanation: The longest valid parentheses substring is "()".
Example 2:

Input: s = ")()())"
Output: 4
Explanation: The longest valid parentheses substring is "()()".
Example 3:

Input: s = ""
Output: 0
 