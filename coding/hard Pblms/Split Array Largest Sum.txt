class Solution {
    public boolean isPossible(int[] arr,int k,int mid)
    {
         int temp=0;
         k-=1;
         for(int i=0;i<arr.length;i++)
         {
            int val=arr[i];
            if(val>mid)
             return false;
            if(temp+val>mid)
            {
                k-=1;
                temp=0;
            }
            temp+=val;
            if(k<0)
             return false;
         }
         return true;
    }
    public int splitArray(int[] nums, int k) {
        int l=0;
        int r=(int)Math.pow(10,9);
        while(l<=r)
        {
            int mid=l+(r-l)/2;
            if(isPossible(nums,k,mid))
              r=mid-1;
            else 
             l=mid+1;
        }
        return l;
    }
}

Given an integer array nums and an integer k, split nums into k non-empty subarrays such that the largest sum of any subarray is minimized.

Return the minimized largest sum of the split.

A subarray is a contiguous part of the array.

 

Example 1:

Input: nums = [7,2,5,10,8], k = 2
Output: 18
Explanation: There are four ways to split nums into two subarrays.
The best way is to split it into [7,2,5] and [10,8], where the largest sum among the two subarrays is only 18.
Example 2:

Input: nums = [1,2,3,4,5], k = 2
Output: 9
Explanation: There are four ways to split nums into two subarrays.
The best way is to split it into [1,2,3] and [4,5], where the largest sum among the two subarrays is only 9.